name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ ubuntu-24.04, windows-latest ]
        build_type: [ Release ]
        c_compiler: [ clang, cl ]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            generator: "Visual Studio 17 2022"
          - os: ubuntu-24.04  # version of ubuntu is too old
            c_compiler: gcc
            cpp_compiler: g++
            generator: "Ninja"
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-24.04
            c_compiler: cl

    steps:
      - uses: actions/checkout@v3
      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
      - name: Install dependencies
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt update &&
          sudo apt upgrade -y gcc g++ &&
          sudo apt install -y clang ninja-build perl autoconf automake libtool pkg-config libcrypt-dev libltdl-dev
      - name: Setup vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git &&
          ./vcpkg/bootstrap-vcpkg.sh
        env:
          VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      - name: vcpkg build
        run: vcpkg install
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          mkdir build &&
          cd build &&
          cmake -G "${{matrix.generator}}" .. --toolchain=../vcpkg/scripts/buildsystems/vcpkg.cmake &&
          cmake --build . --parallel

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config --output-on-failure ${{ matrix.build_type }}